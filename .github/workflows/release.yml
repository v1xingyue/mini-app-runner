name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Create Release
        id: create-release
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${{ github.ref_name }}`,
              name: `mini-app-runner ${{ github.ref_name }}`,
              body: 'See the assets to download the application for your platform.',
              draft: true,
              prerelease: false
            });

            core.setOutput('upload_url', data.upload_url);
            return data.id

  build:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, macos-latest, macos-14] # macos-14 is for Apple Silicon
        include:
          - platform: windows-latest
            target: windows
            artifact: mini-app-runner_${{ github.ref_name }}_x64_en-US.msi
          - platform: macos-latest
            target: macos
            artifact: mini-app-runner_${{ github.ref_name }}_x64.dmg # Intel Mac
          - platform: macos-14
            target: macos
            artifact: mini-app-runner_${{ github.ref_name }}_aarch64.dmg # Apple Silicon Mac

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install dependencies
        run: pnpm install

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies (macOS only)
        if: matrix.platform == 'macos-latest' || matrix.platform == 'macos-14'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Install dependencies (Windows only)
        if: matrix.platform == 'windows-latest'
        run: |
          rustup target add x86_64-pc-windows-msvc

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@v0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

      - name: Upload Windows artifact
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/msi/mini-app-runner_${{ github.ref_name }}_x64_en-US.msi
          asset_name: mini-app-runner_${{ github.ref_name }}_x64_en-US.msi
          asset_content_type: application/octet-stream

      - name: Upload macOS Intel artifact
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/dmg/mini-app-runner_${{ github.ref_name }}_x64.dmg
          asset_name: mini-app-runner_${{ github.ref_name }}_x64.dmg
          asset_content_type: application/octet-stream

      - name: Upload macOS Apple Silicon artifact
        if: matrix.platform == 'macos-14'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./src-tauri/target/release/bundle/dmg/mini-app-runner_${{ github.ref_name }}_aarch64.dmg
          asset_name: mini-app-runner_${{ github.ref_name }}_aarch64.dmg
          asset_content_type: application/octet-stream

  publish-release:
    runs-on: ubuntu-latest
    needs: [create-release, build]
    steps:
      - name: Publish Release
        uses: actions/github-script@v7
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false
            })
